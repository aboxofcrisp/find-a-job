
1.重载 override和重写 overwrite的区别
 重载 override 在一个类中方法名相同，参数不同，类型不同，顺序不同的方法
 重写 子类重写父类中的同名方法,重写是为了在子类中重新改写父类中的同名方法。
 
2.String类和StringBuilder类、StringBuffer类的区别， String类为什么是不可变的
 因为String类使用了final的字符数据来存储数据所以String类是不可变的。
 StringBuffer类是实现了同步是线程安全的
 StringBuilder类在JDK1.5之后出现是非线程安全的。
 参考知识：常量池 方法区
3.自动拆箱、装箱
 自动装箱：自动将基本类型用它们的引用类型包装起来
 自动拆箱：自动将基本类型的引用类型转化为基本数据类型
 
 在循环中生成临时对象会产生性能问题
 
 4. == 和 equals 
  == 是比较两个对象的地址是否相等，基本对象比较的是值是否相等
  equals 是比较两个对象的内容是否相等
  
 5. final关键字
  final修饰的变量一旦赋值就不能进行修改
  final修饰的类不允许继承
  final修饰的方法不允许修改
  
 6.Object类常见方法 wait,notify,notifyAll,toString,equal,hashCode
 
 7.Java 异常处理
 
 8.接口和抽象类的区别
 
 9.Volatile的工作原理
 
 10.CAS是如何实现的
 
 11.ThreadLocal底层是如何实现的
 
 12.Synchronize和Lock区别
 
 13.线程池底层如何实现
 
 14.Java类加载机制
  JVM启动的时候并不会一次性就加载所有类到内存中
  JVM采用双亲委托加载机制 ApplicationClassLoader -> ExtensionClassLoader -> BootstrapClassLoader 如果要加载一个类是一步一步委托到Boostrap最开始加载类
  加载过程分为七部 加载 -> 连接（验证、准备、解析） -> 初始化 -> 应用 -> 卸载
  类的执行顺序:
        确定类变量的初始化值。 类加载的准备阶段JVM会为类变量初始化零值final修饰的类变量会直接初始化。
        初始化main方法。 初始化main方法所在的整个类，首先初始化类构造器之后初始化对象构造器。
        初始化类构造器。 JVM按代码顺序手机类变量的复制语句，静态代码块，按出现的先后顺序初始化。
        初始化对象构造器。 JVM按照优先成员变量和普通代码块赋值后构造方法的执行的顺序执行

  
 
 15.线程和进程之间的区别
  因素             进程                      线程
  定义          进程是一段正在运行的程序       线程是轻量级进程
  上下文切换    进程切换繁重，需要更多时间切换  切换代价小
  内存共享      内存独立不共享                线程之间可以实现内存共享
  资源消耗      消耗更多资源，进程终止释放字眼，进程由操作系统维护                  消耗更少资源，线程终止不是放资源，线程由程序员维护
          
 
 
 
 
   
   
  
  
 




 
 
